/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VideoMenager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Builder = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VideoMenager = exports.VideoMenager = function () {
  function VideoMenager(parentNode, eventHandler) {
    _classCallCheck(this, VideoMenager);

    this.builder = new _Builder.Builder(parentNode);
    this.eventHandler = eventHandler;
    this.activeObject;
    this.isActiveEvent = false;
  }

  _createClass(VideoMenager, [{
    key: "run",
    value: function run() {
      this.runStartVideoEvent();
    }
  }, {
    key: "runStartVideoEvent",
    value: function runStartVideoEvent() {
      var _this = this;

      this.eventHandler.forEach(function (eventTarget) {
        _this.createEvent(eventTarget);
      });
    }
  }, {
    key: "createEvent",
    value: function createEvent(eventTarget) {
      var _this2 = this;

      eventTarget.addEventListener("click", function () {
        _this2.moveVideo(eventTarget);
      });
    }
  }, {
    key: "moveVideo",
    value: function moveVideo(eventTarget) {
      this.activeObject = document.getElementById(eventTarget.getAttribute("data-eventHandler"));
      this.startMovie();
    }
  }, {
    key: "startMovie",
    value: function startMovie() {
      this.displayImage();
      this.removeDisplayVideoFrame();
      var videoSrc = this.activeObject.getAttribute("data-video");
      this.activeObject.querySelector("iframe").classList.add("video-player");
      this.activeObject.querySelector("iframe").src = videoSrc;
    }
  }, {
    key: "displayImage",
    value: function displayImage() {
      this.activeObject.firstElementChild.classList.add("video-player-image--display");
    }
  }, {
    key: "removeDisplayVideoFrame",
    value: function removeDisplayVideoFrame() {
      this.activeObject.querySelector("iframe").classList.remove("video-player--display");
    }
  }, {
    key: "removeEvent",
    value: function removeEvent() {
      this.removeDisplayImage();
      this.displayVideo();
    }
  }, {
    key: "removeDisplayImage",
    value: function removeDisplayImage() {
      this.activeObject.firstElementChild.classList.remove("video-player-image--display");
    }
  }, {
    key: "displayVideo",
    value: function displayVideo() {
      this.activeObject.querySelector("iframe").classList.add("video-player--display");
      this.activeObject.querySelector("iframe").src = "";
    }
  }]);

  return VideoMenager;
}();

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Builder = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _VideoObject = __webpack_require__(2);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Builder = exports.Builder = function () {
  function Builder(nodes) {
    _classCallCheck(this, Builder);

    this.nodes = nodes;
    this.component = new _VideoObject.VideoObject();
    this.list = new Array();
  }

  _createClass(Builder, [{
    key: "build",
    value: function build() {
      var _this = this;

      this.nodes.forEach(function (node) {
        _this.constructObject(node);
      });
    }
  }, {
    key: "constructObject",
    value: function constructObject(node) {
      this.constructImageSrc(node);
      this.constructVideoSrc(node);
      this.pushToList(this.component);
    }
  }, {
    key: "constructImageSrc",
    value: function constructImageSrc(node) {
      this.component.setImageSrc(node.firstElementChild.src);
    }
  }, {
    key: "constructVideoSrc",
    value: function constructVideoSrc(node) {
      this.component.setVideoSrc(node.getAttribute("data-video"));
    }
  }, {
    key: "pushToList",
    value: function pushToList(item) {
      this.list.push(item);
    }
  }]);

  return Builder;
}();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VideoObject = exports.VideoObject = function () {
  function VideoObject() {
    _classCallCheck(this, VideoObject);

    this.imageSrc;
    this.videoSrc;
  }

  _createClass(VideoObject, [{
    key: "setImageSrc",
    value: function setImageSrc(src) {
      this.imageSrc = src;
    }
  }, {
    key: "setVideoSrc",
    value: function setVideoSrc(src) {
      this.videoSrc = src;
    }
  }]);

  return VideoObject;
}();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Core = __webpack_require__(0);

document.addEventListener("DOMContentLoaded", startAPI);

function startAPI() {
  var App = new _Core.VideoMenager(document.querySelectorAll(".video-player-menager-imageContainer"), document.querySelectorAll("[data-eventHandler]"));
  App.run();
  document.querySelectorAll("[data-button]").forEach(function (node) {
    node.addEventListener("click", function () {
      App.removeEvent();
    });
  });
}

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,