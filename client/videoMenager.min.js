/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VideoMenager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Builder = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VideoMenager = exports.VideoMenager = function () {
  function VideoMenager(parentNode, eventHandler) {
    _classCallCheck(this, VideoMenager);

    this.builder = new _Builder.Builder(parentNode);
    this.eventHandler = eventHandler;
    this.activeObject;
    this.isActiveEvent = false;
  }

  _createClass(VideoMenager, [{
    key: "run",
    value: function run() {
      this.runStartVideoEvent();
    }
  }, {
    key: "runStartVideoEvent",
    value: function runStartVideoEvent() {
      var _this = this;

      this.eventHandler.forEach(function (eventTarget) {
        _this.createEvent(eventTarget);
      });
    }
  }, {
    key: "createEvent",
    value: function createEvent(eventTarget) {
      var _this2 = this;

      eventTarget.addEventListener("click", function () {
        _this2.moveVideo(eventTarget);
      });
    }
  }, {
    key: "moveVideo",
    value: function moveVideo(eventTarget) {
      this.activeObject = document.getElementById(eventTarget.getAttribute("data-eventHandler"));
      this.startMovie();
    }
  }, {
    key: "startMovie",
    value: function startMovie() {
      this.displayImage();
      this.removeDisplayVideoFrame();
      var videoSrc = this.activeObject.getAttribute("data-video");
      this.activeObject.querySelector("iframe").classList.add("video-player");
      this.activeObject.querySelector("iframe").src = videoSrc;
    }
  }, {
    key: "displayImage",
    value: function displayImage() {
      this.activeObject.firstElementChild.classList.add("video-player-image--display");
    }
  }, {
    key: "removeDisplayVideoFrame",
    value: function removeDisplayVideoFrame() {
      this.activeObject.querySelector("iframe").classList.remove("video-player--display");
    }
  }, {
    key: "removeEvent",
    value: function removeEvent() {
      this.removeDisplayImage();
      this.displayVideo();
      this.flushActiveObject();
    }
  }, {
    key: "removeDisplayImage",
    value: function removeDisplayImage() {
      this.activeObject.firstElementChild.classList.remove("video-player-image--display");
    }
  }, {
    key: "displayVideo",
    value: function displayVideo() {
      this.activeObject.querySelector("iframe").classList.add("video-player--display");
      this.activeObject.querySelector("iframe").src = "";
    }
  }, {
    key: "flushActiveObject",
    value: function flushActiveObject() {
      this.activeObject = null;
    }
  }]);

  return VideoMenager;
}();

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Builder = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _VideoObject = __webpack_require__(2);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Builder = exports.Builder = function () {
  function Builder(nodes) {
    _classCallCheck(this, Builder);

    this.nodes = nodes;
    this.component = new _VideoObject.VideoObject();
    this.list = new Array();
  }

  _createClass(Builder, [{
    key: "build",
    value: function build() {
      var _this = this;

      this.nodes.forEach(function (node) {
        _this.constructObject(node);
      });
    }
  }, {
    key: "constructObject",
    value: function constructObject(node) {
      this.constructImageSrc(node);
      this.constructVideoSrc(node);
      this.pushToList(this.component);
    }
  }, {
    key: "constructImageSrc",
    value: function constructImageSrc(node) {
      this.component.setImageSrc(node.firstElementChild.src);
    }
  }, {
    key: "constructVideoSrc",
    value: function constructVideoSrc(node) {
      this.component.setVideoSrc(node.getAttribute("data-video"));
    }
  }, {
    key: "pushToList",
    value: function pushToList(item) {
      this.list.push(item);
    }
  }]);

  return Builder;
}();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VideoObject = exports.VideoObject = function () {
  function VideoObject() {
    _classCallCheck(this, VideoObject);

    this.imageSrc;
    this.videoSrc;
  }

  _createClass(VideoObject, [{
    key: "setImageSrc",
    value: function setImageSrc(src) {
      this.imageSrc = src;
    }
  }, {
    key: "setVideoSrc",
    value: function setVideoSrc(src) {
      this.videoSrc = src;
    }
  }]);

  return VideoObject;
}();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Core = __webpack_require__(0);

document.addEventListener("DOMContentLoaded", startAPI);

function startAPI() {
  var App = new _Core.VideoMenager(document.querySelectorAll(".video-player-menager-imageContainer"), document.querySelectorAll("[data-eventHandler]"));
  App.run();
  document.querySelectorAll("[data-button]").forEach(function (node) {
    node.addEventListener("click", function () {
      App.removeEvent();
    });
  });
}

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgODMzYmM5MjdmYzY3ODk5ZjczMjQiLCJ3ZWJwYWNrOi8vLy4vSlMvVmlkZW9QbGF5ZXJNZW5hZ2VyL0NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vSlMvVmlkZW9QbGF5ZXJNZW5hZ2VyL1NlcnZpY2UvQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9KUy9WaWRlb1BsYXllck1lbmFnZXIvZG9tYWluQXBwbGljYXRpb24vVmlkZW9PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vSlMvYXBwLmpzIl0sIm5hbWVzIjpbIlZpZGVvTWVuYWdlciIsInBhcmVudE5vZGUiLCJldmVudEhhbmRsZXIiLCJidWlsZGVyIiwiYWN0aXZlT2JqZWN0IiwiaXNBY3RpdmVFdmVudCIsInJ1blN0YXJ0VmlkZW9FdmVudCIsImZvckVhY2giLCJldmVudFRhcmdldCIsImNyZWF0ZUV2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1vdmVWaWRlbyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRBdHRyaWJ1dGUiLCJzdGFydE1vdmllIiwiZGlzcGxheUltYWdlIiwicmVtb3ZlRGlzcGxheVZpZGVvRnJhbWUiLCJ2aWRlb1NyYyIsInF1ZXJ5U2VsZWN0b3IiLCJjbGFzc0xpc3QiLCJhZGQiLCJzcmMiLCJmaXJzdEVsZW1lbnRDaGlsZCIsInJlbW92ZSIsInJlbW92ZURpc3BsYXlJbWFnZSIsImRpc3BsYXlWaWRlbyIsImZsdXNoQWN0aXZlT2JqZWN0IiwiQnVpbGRlciIsIm5vZGVzIiwiY29tcG9uZW50IiwibGlzdCIsIkFycmF5Iiwibm9kZSIsImNvbnN0cnVjdE9iamVjdCIsImNvbnN0cnVjdEltYWdlU3JjIiwiY29uc3RydWN0VmlkZW9TcmMiLCJwdXNoVG9MaXN0Iiwic2V0SW1hZ2VTcmMiLCJzZXRWaWRlb1NyYyIsIml0ZW0iLCJwdXNoIiwiVmlkZW9PYmplY3QiLCJpbWFnZVNyYyIsInN0YXJ0QVBJIiwiQXBwIiwicXVl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QUNUbEMsU0FBU2tDLGdCQUFULENBQTBCLHFCQUExQixDQURTLENBQVY7QUFFQUQsTUFBSUUsR0FBSjtBQUNBbkMsV0FBU2tDLGdCQUFULENBQTBCLGVBQTFCLEVBQTJDdkMsT0FBM0MsQ0FBbUQsVUFBQzBCLElBQUQsRUFBUTtBQUN6REEsU0FBS3ZCLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLFlBQUk7QUFBQ21DLFVBQUlHLFdBQUo7QUFBbUIsS0FBdkQ7QUFDRCxHQUZEO0FBSUMsQyIsImZpbGUiOiJjbGllbnQvdmlkZW9NZW5hZ2VyLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDgzM2JjOTI3ZmM2Nzg5OWY3MzI0IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmltcG9ydCB7QnVpbGRlcn0gZnJvbSAnLi9TZXJ2aWNlL0J1aWxkZXIuanMnO1xyXG5leHBvcnQgY2xhc3MgVmlkZW9NZW5hZ2Vye1xyXG5cclxuY29uc3RydWN0b3IgKHBhcmVudE5vZGUsZXZlbnRIYW5kbGVyKXtcclxuICB0aGlzLmJ1aWxkZXIgPSBuZXcgQnVpbGRlcihwYXJlbnROb2RlKTtcclxuICB0aGlzLmV2ZW50SGFuZGxlciA9IGV2ZW50SGFuZGxlcjtcclxuICB0aGlzLmFjdGl2ZU9iamVjdDtcclxuICB0aGlzLmlzQWN0aXZlRXZlbnQgPSBmYWxzZTtcclxuXHJcbn1cclxuXHJcbnJ1bigpe1xyXG4gIHRoaXMucnVuU3RhcnRWaWRlb0V2ZW50KCk7XHJcbn1cclxuXHJcbnJ1blN0YXJ0VmlkZW9FdmVudCgpe1xyXG4gIHRoaXMuZXZlbnRIYW5kbGVyLmZvckVhY2goXHJcbihldmVudFRhcmdldCkgPT4ge1xyXG4gIHRoaXMuY3JlYXRlRXZlbnQoZXZlbnRUYXJnZXQpO1xyXG59KTtcclxufVxyXG5jcmVhdGVFdmVudChldmVudFRhcmdldCl7XHJcbiAgZXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpPT57dGhpcy5tb3ZlVmlkZW8oZXZlbnRUYXJnZXQpO30pO1xyXG59XHJcbm1vdmVWaWRlbyhldmVudFRhcmdldCl7XHJcbiAgdGhpcy5hY3RpdmVPYmplY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChldmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWV2ZW50SGFuZGxlclwiKSk7XHJcbiAgdGhpcy5zdGFydE1vdmllKCk7XHJcblxyXG59XHJcblxyXG5zdGFydE1vdmllKCl7XHJcbiAgdGhpcy5kaXNwbGF5SW1hZ2UoKTtcclxuICB0aGlzLnJlbW92ZURpc3BsYXlWaWRlb0ZyYW1lKCk7XHJcbiAgbGV0IHZpZGVvU3JjID0gdGhpcy5hY3RpdmVPYmplY3QuZ2V0QXR0cmlidXRlKFwiZGF0YS12aWRlb1wiKTtcclxuICB0aGlzLmFjdGl2ZU9iamVjdC5xdWVyeVNlbGVjdG9yKFwiaWZyYW1lXCIpLmNsYXNzTGlzdC5hZGQoXCJ2aWRlby1wbGF5ZXJcIik7XHJcbiAgdGhpcy5hY3RpdmVPYmplY3QucXVlcnlTZWxlY3RvcihcImlmcmFtZVwiKS5zcmMgPSAgdmlkZW9TcmM7XHJcbn1cclxuXHJcbmRpc3BsYXlJbWFnZSgpe1xyXG4gIHRoaXMuYWN0aXZlT2JqZWN0LmZpcnN0RWxlbWVudENoaWxkLmNsYXNzTGlzdC5hZGQoXCJ2aWRlby1wbGF5ZXItaW1hZ2UtLWRpc3BsYXlcIik7XHJcbn1cclxucmVtb3ZlRGlzcGxheVZpZGVvRnJhbWUoKXtcclxuICB0aGlzLmFjdGl2ZU9iamVjdC5xdWVyeVNlbGVjdG9yKFwiaWZyYW1lXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJ2aWRlby1wbGF5ZXItLWRpc3BsYXlcIik7XHJcbn1cclxucmVtb3ZlRXZlbnQoKXtcclxuICB0aGlzLnJlbW92ZURpc3BsYXlJbWFnZSgpO1xyXG4gIHRoaXMuZGlzcGxheVZpZGVvKCk7XHJcbiAgdGhpcy5mbHVzaEFjdGl2ZU9iamVjdCgpO1xyXG59XHJcbnJlbW92ZURpc3BsYXlJbWFnZSgpe1xyXG4gIHRoaXMuYWN0aXZlT2JqZWN0LmZpcnN0RWxlbWVudENoaWxkLmNsYXNzTGlzdC5yZW1vdmUoXCJ2aWRlby1wbGF5ZXItaW1hZ2UtLWRpc3BsYXlcIik7XHJcbn1cclxuZGlzcGxheVZpZGVvKCl7XHJcbiAgdGhpcy5hY3RpdmVPYmplY3QucXVlcnlTZWxlY3RvcihcImlmcmFtZVwiKS5jbGFzc0xpc3QuYWRkKFwidmlkZW8tcGxheWVyLS1kaXNwbGF5XCIpO1xyXG4gIHRoaXMuYWN0aXZlT2JqZWN0LnF1ZXJ5U2VsZWN0b3IoXCJpZnJhbWVcIikuc3JjPVwiXCI7XHJcbn1cclxuZmx1c2hBY3RpdmVPYmplY3QoKXtcclxuICB0aGlzLmFjdGl2ZU9iamVjdCA9IG51bGw7XHJcbn1cclxuXHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL0pTL1ZpZGVvUGxheWVyTWVuYWdlci9Db3JlLmpzIiwiaW1wb3J0IHtWaWRlb09iamVjdH0gZnJvbSAnLi4vZG9tYWluQXBwbGljYXRpb24vVmlkZW9PYmplY3QuanMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJ1aWxkZXIge1xyXG5jb25zdHJ1Y3Rvcihub2Rlcyl7XHJcbiAgdGhpcy5ub2RlcyA9IG5vZGVzO1xyXG4gIHRoaXMuY29tcG9uZW50ID0gbmV3IFZpZGVvT2JqZWN0KCk7XHJcbiAgdGhpcy5saXN0ID0gbmV3IEFycmF5KCk7XHJcbn1cclxuXHJcbmJ1aWxkKCl7XHJcbnRoaXMubm9kZXMuZm9yRWFjaChcclxuICAobm9kZSk9PntcclxuICAgIHRoaXMuY29uc3RydWN0T2JqZWN0KG5vZGUpO1xyXG4gIH1cclxuKTtcclxufVxyXG5cclxuY29uc3RydWN0T2JqZWN0KG5vZGUpe1xyXG4gIHRoaXMuY29uc3RydWN0SW1hZ2VTcmMobm9kZSk7XHJcbiAgdGhpcy5jb25zdHJ1Y3RWaWRlb1NyYyhub2RlKTtcclxuICB0aGlzLnB1c2hUb0xpc3QodGhpcy5jb21wb25lbnQpO1xyXG59XHJcblxyXG5jb25zdHJ1Y3RJbWFnZVNyYyhub2RlKXtcclxuICB0aGlzLmNvbXBvbmVudC5zZXRJbWFnZVNyYyhub2RlLmZpcnN0RWxlbWVudENoaWxkLnNyYyk7XHJcbn1cclxuY29uc3RydWN0VmlkZW9TcmMobm9kZSl7XHJcbiAgdGhpcy5jb21wb25lbnQuc2V0VmlkZW9TcmMobm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZpZGVvXCIpKTtcclxufVxyXG5wdXNoVG9MaXN0KGl0ZW0pe1xyXG4gIHRoaXMubGlzdC5wdXNoKGl0ZW0pO1xyXG59XHJcblxyXG5cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vSlMvVmlkZW9QbGF5ZXJNZW5hZ2VyL1NlcnZpY2UvQnVpbGRlci5qcyIsImV4cG9ydCBjbGFzcyBWaWRlb09iamVjdCB7XHJcbmNvbnN0cnVjdG9yICgpe1xyXG4gIHRoaXMuaW1hZ2VTcmM7XHJcbiAgdGhpcy52aWRlb1NyYztcclxufVxyXG5zZXRJbWFnZVNyYyhzcmMpe1xyXG4gIHRoaXMuaW1hZ2VTcmMgPSBzcmM7XHJcbn1cclxuc2V0VmlkZW9TcmMoc3JjKXtcclxuICB0aGlzLnZpZGVvU3JjID0gc3JjO1xyXG59XHJcblxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9KUy9WaWRlb1BsYXllck1lbmFnZXIvZG9tYWluQXBwbGljYXRpb24vVmlkZW9PYmplY3QuanMiLCJcclxuaW1wb3J0IHtWaWRlb01lbmFnZXJ9IGZyb20gJy4vVmlkZW9QbGF5ZXJNZW5hZ2VyL0NvcmUuanMnO1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBzdGFydEFQSSk7XHJcblxyXG5cclxuZnVuY3Rpb24gc3RhcnRBUEkoKXtcclxudmFyIEFwcCA9IG5ldyBWaWRlb01lbmFnZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi52aWRlby1wbGF5ZXItbWVuYWdlci1pbWFnZUNvbnRhaW5lclwiKVxyXG4sZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWV2ZW50SGFuZGxlcl1cIikpO1xyXG5BcHAucnVuKCk7XHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1idXR0b25dXCIpLmZvckVhY2goKG5vZGUpPT57XHJcbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCk9PntBcHAucmVtb3ZlRXZlbnQoKTt9KTtcclxufSk7XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL0pTL2FwcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=